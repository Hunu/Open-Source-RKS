#include <printf.h>

#include "TimeLib.h"

#include "Z:\bt\web\datastruct.h"
tWeatherRequest WeatherRequest;
tWeatherData WeatherData;

void Hdot();
void hc595senddata(byte data,byte data2,byte data3,byte data4);
void hc138sacn(byte r);   

bool _esp8266_waitFor(const char *string);
bool _esp8266_getch(char * RetData);
bool _esp8266_getValue(const char *string,unsigned char  * Value,unsigned char * Len,unsigned char Start,unsigned char Max) ;

void BufUpdate();
void OnSecond();
void NonStopTask();
void SecondsSinceStartTask();
signed long CompensationMsInOneSecond = -8;
signed long CompensationOneSecondInXSeconds = 0;

bool SendRequestAndProcessReply();
bool initESP8266();

void ShowChart(unsigned char ChartIndex,unsigned char PostionX,unsigned char PostionY);
void WeatherCode2ChartIndex(unsigned char Code,unsigned char * ChartIndex);
void WeatherCode2ChartIndex2(unsigned char Code,unsigned char * ChartIndex);

#define WIFI_SERIAL Serial3

#define RowA 45    		
#define RowB 46
#define RowC 47
#define RowD 48
#define STB 49         //595 Ë¢ï¿½ï¿½ï¿½ï¿½Ê¾  SS  
#define CLK 50         //Ê±ï¿½ï¿½    SCK  
#define OE 51 			//  Ê¹ï¿½ï¿½  
#define R1 52          //ï¿½Ï°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿?   
#define R2 53          //ï¿½Â°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿?    

#define R3 44          //ï¿½Ï°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿?   
#define R4 43          //ï¿½Â°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿?   

//Display

unsigned char ASCII816Buf[16] = {0};
unsigned char DispBuf[16][32] = {0};
unsigned char TimeLine[8]= {32,32,32,32,32,32,32,32};
unsigned char DateLine[10]= {32,32,32,32,32,32,32,32,32,32};//{'1','2','3','4','5','6','7','8','8',' '};//{'A','B','C','D','H','I','O','P'};
unsigned char DateLine2[10] = {32,32,32,32,32,32,32,32,32,32};//{'w','e','a','t','h','e','r','n','o','w'};
unsigned char WeatherDay[2][10] = {{32,32,32,32,32,32,32,32,32,32},{32,32,32,32,32,32,32,32,32,32}};//{'d','a','y','1',' ',' ','T','e','m','p'};
unsigned char WeatherTemp[2][10] = {{32,32,32,32,32,32,32,32,32,32},{32,32,32,32,32,32,32,32,32,32}};//{'w','e','a','t','h','e','r','n','T','p'};
unsigned char WeatherCode[2];

//Serial data
int comdata ;

tmElements_t tm;
time_t t;

unsigned char WeekStr[] = "SunMonTueWedThuFriSat";
unsigned char InfoLen;
unsigned long SecondsSinceStart = 0;
unsigned long Start1970OffSet = 0;
unsigned long LastSyncTime = 0;
unsigned char TimeOut;


#define	KONG		0
#define	QING	1
#define	DUO	2
#define	YUN	3
#define	YING	4
#define	ZHEN	5
#define	YU	6
#define	LEI	7
#define	XIAO	8
#define	ZHONG	9
#define	DA	10
#define	BAO	11
#define	XUE	12
#define	DONG	13
#define	FU	14
#define	CHENG	15
#define	YANG	16
#define	SHA	17
#define	WU	18
#define	MAI	19
#define	FENG	20
#define	JU	21
#define	LONG	22
#define	JUAN	23
#define	LENG	24
#define	RE	25
#define	WEI	26
#define	ZHI	27



unsigned char Chart[] = {

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x40,0x08,0x48,0x7F,0xFC,0x48,0x40,0x4B,0xF8,0x48,0x40,0x4F,0xFE,0x78,0x08,0x4B,0xFC,0x4A,0x08,0x4B,0xF8,0x4A,0x08,0x7B,0xF8,0x4A,0x08,0x02,0x28,0x02,0x10,

	0x02,0x00,0x02,0x00,0x07,0xF0,0x08,0x20,0x18,0x40,0x25,0x80,0x02,0x80,0x0C,0x80,0x71,0xFC,0x02,0x08,0x0C,0x10,0x12,0x20,0x21,0xC0,0x01,0x00,0x0E,0x00,0x70,0x00,

	0x00,0x00,0x00,0x20,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x04,0xFF,0xFE,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x20,0x10,0x10,0x3F,0xF8,0x00,0x08,

	0x00,0x04,0x7C,0xFE,0x44,0x84,0x48,0x84,0x48,0x84,0x50,0xFC,0x48,0x84,0x48,0x84,0x44,0x84,0x44,0xFC,0x44,0x84,0x68,0x84,0x51,0x04,0x41,0x04,0x42,0x14,0x44,0x08,

	0x00,0x80,0x78,0x84,0x4F,0xFE,0x50,0x80,0x50,0xA0,0x61,0x20,0x51,0x28,0x4B,0xFC,0x48,0x20,0x48,0x20,0x68,0x24,0x57,0xFE,0x40,0x20,0x40,0x20,0x40,0x20,0x40,0x20,

	0x00,0x04,0xFF,0xFE,0x01,0x00,0x01,0x08,0x3F,0xFC,0x21,0x08,0x21,0x08,0x29,0x48,0x25,0x28,0x21,0x08,0x21,0x08,0x29,0x48,0x25,0x28,0x21,0x08,0x21,0x28,0x20,0x10,

	0x00,0x10,0x3F,0xF8,0x01,0x00,0x7F,0xFE,0x41,0x02,0x9D,0x74,0x01,0x00,0x1D,0x70,0x01,0x00,0x3F,0xF8,0x21,0x08,0x21,0x08,0x3F,0xF8,0x21,0x08,0x21,0x08,0x3F,0xF8,

	0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x05,0x40,0x05,0x20,0x09,0x10,0x09,0x08,0x11,0x04,0x21,0x04,0x41,0x00,0x01,0x00,0x01,0x00,0x05,0x00,0x02,0x00,

	0x01,0x00,0x01,0x00,0x01,0x04,0x7F,0xFE,0x41,0x04,0x41,0x04,0x41,0x04,0x41,0x04,0x7F,0xFC,0x41,0x04,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,

	0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x04,0xFF,0xFE,0x01,0x00,0x02,0x80,0x02,0x80,0x02,0x40,0x04,0x40,0x04,0x20,0x08,0x10,0x10,0x0E,0x60,0x04,0x00,0x00,

	0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x04,0x40,0x7F,0xFC,0x04,0x40,0xFF,0xFE,0x04,0x40,0x09,0x20,0x35,0x5E,0xC3,0x84,0x09,0x20,0x11,0x10,0x03,0x00,

	0x1F,0xF0,0x01,0x00,0x7F,0xFE,0x41,0x02,0x9D,0x74,0x01,0x00,0x1D,0x70,0x01,0x08,0x3F,0xFC,0x00,0x08,0x00,0x08,0x1F,0xF8,0x00,0x08,0x00,0x08,0x3F,0xF8,0x00,0x08,

	0x00,0x40,0x40,0x48,0x23,0xFC,0x10,0x80,0x10,0x80,0x01,0x20,0x01,0x24,0x0B,0xFE,0x10,0x20,0x60,0xA0,0x20,0xA8,0x21,0x24,0x22,0x22,0x24,0x22,0x20,0xA0,0x00,0x40,

	0x40,0x08,0x30,0x3C,0x17,0xC0,0x00,0x08,0x82,0x48,0x62,0x50,0x20,0x00,0x0B,0xF8,0x10,0x20,0x20,0x44,0xEF,0xFE,0x20,0x40,0x20,0x40,0x20,0x40,0x21,0x40,0x20,0x80,

	0x01,0x00,0x01,0x00,0x05,0x40,0x0D,0x20,0x11,0x18,0x21,0x0C,0x41,0x04,0x00,0x00,0x01,0x00,0x01,0x08,0x7F,0xFC,0x01,0x00,0x01,0x00,0x01,0x04,0xFF,0xFE,0x00,0x00,

	0x10,0x00,0x13,0xF8,0x10,0x10,0x10,0x20,0xFC,0x40,0x10,0x84,0x17,0xFE,0x18,0xA4,0x30,0xA4,0xD0,0xA4,0x11,0x24,0x11,0x44,0x12,0x44,0x14,0x84,0x51,0x28,0x20,0x10,

	0x00,0x40,0x20,0x40,0x18,0x40,0x08,0x40,0x81,0x50,0x61,0x48,0x22,0x46,0x0A,0x42,0x14,0x48,0x20,0x48,0xE0,0x50,0x20,0x20,0x20,0x40,0x20,0x80,0x23,0x00,0x2C,0x00,

	0x3F,0xF8,0x01,0x00,0x7F,0xFE,0x51,0x12,0x89,0x24,0x14,0x10,0x07,0xE0,0x0C,0x40,0x13,0x80,0x0C,0x60,0xF2,0x1E,0x0F,0xE4,0x02,0x20,0x04,0x20,0x08,0xA0,0x30,0x40,

	0x1F,0xF0,0x01,0x00,0x7F,0xFE,0x51,0x12,0x8D,0x64,0x10,0x10,0x2B,0xFC,0xE5,0x24,0x19,0xFC,0x69,0x24,0x95,0xFC,0x64,0x20,0x05,0xFC,0x64,0x20,0x17,0xFE,0x08,0x00,

	0x00,0x10,0x3F,0xF8,0x20,0x10,0x28,0x50,0x24,0x50,0x22,0x90,0x22,0x90,0x21,0x10,0x21,0x10,0x22,0x90,0x22,0x90,0x24,0x50,0x28,0x50,0x30,0x12,0x40,0x0A,0x80,0x06,

	0x04,0x08,0x7E,0xFC,0x44,0x88,0x44,0xF8,0x44,0x88,0x6C,0xF8,0x6C,0x88,0x54,0xF8,0x54,0x88,0x54,0x88,0x6F,0xFE,0x6C,0x50,0x44,0x8A,0x44,0x02,0x43,0xFE,0x80,0x00,

	0x02,0x00,0x02,0x40,0x02,0x20,0x02,0x04,0xFF,0xFE,0x02,0x80,0x02,0x88,0x04,0x88,0x04,0x90,0x04,0xA0,0x08,0xC0,0x08,0x82,0x11,0x82,0x16,0x82,0x20,0x7E,0x40,0x00,

	0x01,0x00,0x11,0x10,0x09,0x20,0x01,0x08,0x7F,0xFC,0x02,0x80,0xFF,0xFE,0x04,0x40,0x08,0x20,0x1F,0xF0,0x28,0x2E,0xC8,0x24,0x09,0x20,0x08,0xC8,0x08,0x08,0x07,0xF8,

	0x00,0x80,0x40,0x80,0x31,0x40,0x12,0x20,0x04,0x10,0x09,0x08,0x10,0x8E,0x10,0x84,0x27,0xF0,0xE0,0x10,0x20,0x20,0x20,0x40,0x22,0x80,0x21,0x00,0x20,0xC0,0x00,0x40,

	0x08,0x40,0x08,0x40,0x08,0x48,0x7F,0xFC,0x08,0x48,0x0A,0x48,0x1C,0xC8,0x68,0x48,0x08,0xA8,0x08,0x8A,0x29,0x0A,0x12,0x04,0x00,0x00,0x48,0x88,0x44,0x46,0x84,0x42,

	0x01,0x00,0x01,0x00,0x01,0x08,0x7F,0xFC,0x01,0x00,0x01,0x00,0x01,0x04,0xFF,0xFE,0x03,0x80,0x05,0x40,0x09,0x20,0x11,0x10,0x21,0x0E,0x41,0x04,0x01,0x00,0x01,0x00,

	0x20,0x00,0x20,0x00,0x22,0x04,0x3F,0x7E,0x28,0x44,0x48,0x44,0x88,0x44,0x09,0x44,0xFF,0xC4,0x08,0x44,0x08,0x44,0x14,0x44,0x12,0x44,0x22,0x7C,0x40,0x44,0x80,0x00,

};

unsigned char ASCII816[96][16]=
{
	// !
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,
	//"#ï¿½ï¿½
	0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,
	//$% ï¿½ï¿½

	0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,
	0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,
	//&'ï¿½ï¿½

	0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,
	0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	//() ï¿½ï¿½
	0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,
	0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,
	//*+ï¿½ï¿½

	0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,
	0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,
	//,-ï¿½ï¿½

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
	//./ ï¿½ï¿½

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,
	//01ï¿½ï¿½


	0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,
	0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,
	//23ï¿½ï¿½

	0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,
	0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,
	//45ï¿½ï¿½
	0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,
	0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,
	//67ï¿½ï¿½
	0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,
	0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,
	//89ï¿½ï¿½
	0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,
	0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,
	//:;ï¿½ï¿½

	0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,
	//<=ï¿½ï¿½
	0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,
	0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,
	//>?ï¿½ï¿½
	0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,
	0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,
	//@A
	0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,
	0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,
	//BCï¿½ï¿½
	0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,
	0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,
	//DE
	0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,
	0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,
	//FG?

	0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,
	0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,
	//HIï¿½ï¿½
	0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,
	0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,
	//JK
	0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,
	0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,
	//LM
	0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,
	0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,
	//NOï¿½ï¿½
	0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,
	0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,
	//PQï¿½ï¿½
	0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,
	0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,
	//RSï¿½ï¿½
	0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,
	0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,
	//TUï¿½ï¿½
	0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,
	0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,
	//VWï¿½ï¿½
	0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,
	0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,
	//XYï¿½ï¿½
	0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,
	0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,
	//Z[ï¿½ï¿½
	0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,
	0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,
	//\]ï¿½ï¿½
	0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,
	0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,
	//^_

	0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
	//`a

	0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,
	//bc
	0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,
	0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,
	//deï¿½ï¿½
	0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,
	0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,
	//fgï¿½ï¿½
	0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,
	//hiï¿½ï¿½
	0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,
	0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,
	//jk

	0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,
	0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,
	//lmï¿½ï¿½
	0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,
	0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,
	//no
	0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,
	0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,
	//pqï¿½ï¿½
	0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,
	0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,
	//rsï¿½ï¿½
	0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,
	//tu?
	0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,
	0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,
	//vwï¿½ï¿½
	0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,
	0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,
	//xy
	0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,
	0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,
	//z{ï¿½ï¿½
	0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,
	0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,
	//|}ï¿½ï¿½
	0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,
	0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,
	//~ï¿½ï¿½
	0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};


unsigned char ACSII57[95][5]=
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00 },  // sp
	{ 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
	{ 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
	{ 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
	{ 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
	{ 0xc4, 0xc8, 0x10, 0x26, 0x46 },   // %
	{ 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
	{ 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
	{ 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
	{ 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
	{ 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
	{ 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
	{ 0x00, 0x00, 0x50, 0x30, 0x00 },   // ,
	{ 0x10, 0x10, 0x10, 0x10, 0x10 },   // -
	{ 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
	{ 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
	{ 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
	{ 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
	{ 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
	{ 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
	{ 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
	{ 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
	{ 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
	{ 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
	{ 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
	{ 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
	{ 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
	{ 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
	{ 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
	{ 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
	{ 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
	{ 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
	{ 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
	{ 0x7E, 0x11, 0x11, 0x11, 0x7E },   // A
	{ 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
	{ 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
	{ 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
	{ 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
	{ 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
	{ 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
	{ 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
	{ 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
	{ 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
	{ 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
	{ 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
	{ 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
	{ 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
	{ 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
	{ 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
	{ 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
	{ 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
	{ 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
	{ 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
	{ 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
	{ 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
	{ 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
	{ 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
	{ 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
	{ 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
	{ 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
	{ 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
	{ 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
	{ 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
	{ 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
	{ 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
	{ 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
	{ 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
	{ 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
	{ 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
	{ 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
	{ 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
	{ 0x0C, 0x52, 0x52, 0x52, 0x3E },   // g
	{ 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
	{ 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
	{ 0x20, 0x40, 0x44, 0x3D, 0x00 },   // j
	{ 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
	{ 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
	{ 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
	{ 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
	{ 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
	{ 0x7C, 0x14, 0x14, 0x14, 0x08 },   // p
	{ 0x08, 0x14, 0x14, 0x18, 0x7C },   // q
	{ 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
	{ 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
	{ 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
	{ 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
	{ 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
	{ 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
	{ 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
	{ 0x0C, 0x50, 0x50, 0x50, 0x3C },   // y
	{ 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
	{ 0x00, 0x08, 0x36, 0x41, 0x00 },   // {
	{ 0x00, 0x00, 0x77, 0x00, 0x00 },   // |
	{ 0x00, 0x41, 0x36, 0x08, 0x00 },   // }
	{ 0x04, 0x02, 0x04, 0x08, 0x04 }   // ~
};

void setup()
{
	Serial.begin(115200);
	Serial.println(F("Weather_Time_noGPS\r\n"));
	printf_begin();


	//Serial.begin(115200);
	Serial1.begin(9600);
	Serial2.begin(38400);
	Serial3.begin(115200);

	pinMode(RowA, OUTPUT);
	pinMode(RowB, OUTPUT);
	pinMode(RowC, OUTPUT);
	pinMode(RowD, OUTPUT); //138Æ¬Ñ¡
	pinMode(OE, OUTPUT); //138
	pinMode(R1, OUTPUT);//595
	pinMode(R2, OUTPUT);//595
	pinMode(R3, OUTPUT);//595
	pinMode(R4, OUTPUT);//595
	pinMode(CLK, OUTPUT); //595
	pinMode(STB, OUTPUT); //595 

	DDRA=B00001111;

	Hdot();



	Serial.println(F("before Getweather!\r\n"));

	initESP8266();

	if(!SendRequestAndProcessReply())
	{
		DateLine2[0] = '-';
		DateLine2[1] = '-';
		Serial.println(F("GetWeather failed!\r\n"));
		//return;
	}
	else
	{
		DateLine2[0] = WeatherData.TemperatureNow[0];
		DateLine2[1] = WeatherData.TemperatureNow[1];
	}
	BufUpdate();

}

void loop()
{
	NonStopTask();
}


void NonStopTask()
{
	static unsigned char row=0;//16
	static unsigned char col=0;//8

	SecondsSinceStartTask();

	hc595senddata(DispBuf[col][row],DispBuf[col][row+16],DispBuf[col+8][row],DispBuf[col+8][row+16]);//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½16ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½16ï¿½ï¿½Í¬Ê±ï¿½ï¿½ï¿½Í¡ï¿½
	col++;
	if (col>=8)
	{
		digitalWrite(OE, 1);
		hc138sacn(row);
		digitalWrite(STB, 1);
		digitalWrite(STB, 0);
		//CheckGPSInput();

		digitalWrite(OE, 0); 

		col=0;
		row++;
		if (row>=16)
		{
			row = 0;
		}
	}
}

unsigned long LastMillis = 0;
void SecondsSinceStartTask()
{
	unsigned long CurrentMillis = millis();
	if(abs(CurrentMillis-LastMillis)> (1000 + CompensationMsInOneSecond))
	{
		LastMillis = CurrentMillis;
		SecondsSinceStart++;
		OnSecond();
	}
}

bool initESP8266()
{
	//WIFI_SERIAL.print(F("AT+CWJAP=\"frye\",\"52150337\"\r\n"));
	WIFI_SERIAL.print(F("AT+RST\r\n"));
	TimeOut = 30;
	_esp8266_waitFor("GOT IP\r\n");
	TimeOut = 10;

	


	WIFI_SERIAL.print(F("AT+CIPSTART=\"UDP\","));
	WIFI_SERIAL.print(F("\"192.168.0.17\""));
	WIFI_SERIAL.print(F(",5050\r\n"));
	if(!_esp8266_waitFor("OK\r\n")) return false;
}


bool SendRequestAndProcessReply()
{
	unsigned char data;
	unsigned char dataIndex = 0;
	unsigned char *dataPoint;



	WIFI_SERIAL.print(F("AT+CIPSEND="));
	WIFI_SERIAL.print(sizeof(tWeatherRequest));
	WIFI_SERIAL.print(F("\r\n"));

	if(!_esp8266_waitFor("OK\r\n>")) return false;

	WeatherRequest.DataType = 8;
	
	for(unsigned char i = 0; i<(sizeof(tWeatherRequest)) ; i++)
	{
		data = *(((char*)(&WeatherRequest))+i);
		WIFI_SERIAL.write(data);
	}

	if(!_esp8266_waitFor(":")) return false;

	dataPoint = (unsigned char *)&WeatherData;

	while(1)
	{
		if (_esp8266_getch((char *)&data))
		{
			dataPoint[dataIndex] = data;
			dataIndex++;

			if (dataIndex>=sizeof(tWeatherData))
			{
				break;
			}
		}
		else
		{
			printf("can not wait more data\r\n");
			return false;
		}
	}
	printf("\r\nget full weather data\r\n");

	printf("TimeNow:%ld\r\n",WeatherData.TimeNow);
	WeatherRequest.LastTimeDiff = (SecondsSinceStart+Start1970OffSet) - WeatherData.TimeNow;
	Start1970OffSet = WeatherData.TimeNow-SecondsSinceStart;
	if (
		(WeatherData.TimeNow - LastSyncTime > 900*3)
		&&(WeatherData.TimeNow - LastSyncTime < 1100*3)
		&&(abs(WeatherRequest.LastTimeDiff)<30*3)
		)
	{
		CompensationMsInOneSecond = CompensationMsInOneSecond + WeatherRequest.LastTimeDiff/3;//+ fast. - slow
	}
	LastSyncTime = WeatherData.TimeNow;

	printf("TemperatureNow:");
	printf("%c",WeatherData.TemperatureNow[0]);
	printf("%c",WeatherData.TemperatureNow[1]);
	printf("\r\n");

	unsigned char i;
	unsigned char j;
	for (i = 0;i<3;i++)
	{
		printf("WeatherDate:");
		for (j = 0;j<5;j++)
		{
			printf("%c",WeatherData.WeatherDate[i][j]);
		}
		printf("\r\n");

		printf("WeatherCode:");
		printf("%d",WeatherData.WeatherCode[i]);
		printf("\r\n");

		printf("WeatherHigh:");
		for (j = 0;j<2;j++)
		{
			printf("%c",WeatherData.WeatherHigh[i][j]);
		}
		printf("\r\n");

		printf("WeatherLow:");
		for (j = 0;j<2;j++)
		{
			printf("%c",WeatherData.WeatherLow[i][j]);
		}
		printf("\r\n");
	}

	WIFI_SERIAL.print(F("AT+CIPCLOSE\r\n"));

	if(!_esp8266_waitFor("OK\r\n")) return false;

	return true;
}

void BufUpdate()
{
	t = SecondsSinceStart+Start1970OffSet+3600*8;

	if (hour(t)<18)
	{
		WeatherCode[0] = WeatherData.WeatherCode[0];
		WeatherCode[1] = WeatherData.WeatherCode[1];

		for (unsigned char j = 0;j<5;j++)
		{
			WeatherDay[0][j] = WeatherData.WeatherDate[0][j];
			WeatherDay[1][j] = WeatherData.WeatherDate[1][j];
		}

		WeatherTemp[0][0] = WeatherData.WeatherLow[0][0];
		WeatherTemp[0][1] = WeatherData.WeatherLow[0][1];
		WeatherTemp[0][2] = ' ';
		WeatherTemp[0][3] = WeatherData.WeatherHigh[0][0];
		WeatherTemp[0][4] = WeatherData.WeatherHigh[0][1];

		WeatherTemp[1][0] = WeatherData.WeatherLow[1][0];
		WeatherTemp[1][1] = WeatherData.WeatherLow[1][1];
		WeatherTemp[1][2] = ' ';
		WeatherTemp[1][3] = WeatherData.WeatherHigh[1][0];
		WeatherTemp[1][4] = WeatherData.WeatherHigh[1][1];

	} 
	else
	{
		WeatherCode[0] = WeatherData.WeatherCode[1];
		WeatherCode[1] = WeatherData.WeatherCode[2];

		for (unsigned char j = 0;j<5;j++)
		{
			WeatherDay[0][j] = WeatherData.WeatherDate[1][j];
			WeatherDay[1][j] = WeatherData.WeatherDate[2][j];
		}

		WeatherTemp[0][0] = WeatherData.WeatherLow[1][0];
		WeatherTemp[0][1] = WeatherData.WeatherLow[1][1];
		WeatherTemp[0][2] = ' ';
		WeatherTemp[0][3] = WeatherData.WeatherHigh[1][0];
		WeatherTemp[0][4] = WeatherData.WeatherHigh[1][1];

		WeatherTemp[1][0] = WeatherData.WeatherLow[2][0];
		WeatherTemp[1][1] = WeatherData.WeatherLow[2][1];
		WeatherTemp[1][2] = ' ';
		WeatherTemp[1][3] = WeatherData.WeatherHigh[2][0];
		WeatherTemp[1][4] = WeatherData.WeatherHigh[2][1];
	}

	unsigned char tempDay = day(t);
	unsigned char tempMonth = month(t);
	unsigned int tempYearh = year(t);

	unsigned char week = weekday(t);
	DateLine2[7] = WeekStr[(week-1)*3];
	DateLine2[8] = WeekStr[(week-1)*3+1];
	DateLine2[9] = WeekStr[(week-1)*3+2];

	DateLine[0]=tempYearh/1000%10+0x30;
	DateLine[1]=tempYearh/100%10+0x30;
	DateLine[2]=tempYearh/10%10+0x30;
	DateLine[3]=tempYearh%10+0x30;

	DateLine[4] = '-';

	DateLine[5]=tempMonth/10%10+0x30;
	DateLine[6]=tempMonth%10+0x30;

	DateLine[7] = '-';

	DateLine[8]=tempDay/10%10+0x30;
	DateLine[9]=tempDay%10+0x30;

	TimeLine[2] = ':';
	TimeLine[5] = ':';


	for (int j=8; j<16; j++)
	{
		for (int i=0; i<16; i++)
		{
			DispBuf[j][i] = 0;
		}
	}


	for (int j=8*8; j<64+60; j++)
	{
		for (int i=0; i<8; i++)
		{
			DispBuf[j/8][i] |= (
				(
				((j-64+1)%6==0)
				?
				0
				:
			((ACSII57[DateLine[(j-64)/6]-32][(j-64)%6]>>i)&1)
				) 
				<<(j%8)
				);

		}

	}

	for (int j=8*8; j<64+60; j++)
	{
		for (int i=8; i<16; i++)
		{
			DispBuf[j/8][i] |= (
				(
				((j-64+1)%6==0)
				?
				0
				:
			((ACSII57[DateLine2[(j-64)/6]-32][(j-64)%6]>>(i-8))&1)
				)
				<<(j%8)
				);

		}
	}



	for (int j=8; j<16; j++)
	{
		for (int i=0+16; i<16+16; i++)
		{
			DispBuf[j][i] = 0;
		}
	}


	for (int j=8*8; j<64+30; j++)
	{
		for (int i=0+16; i<8+16; i++)
		{
			DispBuf[j/8][i] |= (
				(
				((j-64+1)%6==0)
				?
				0
				:
			((ACSII57[WeatherDay[0][(j-64)/6]-32][(j-64)%6]>>(i-16))&1)
				) 
				<<(j%8)
				);
		}
	}

	for (int j=8*8; j<64+30; j++)
	{
		for (int i=8+16; i<16+16; i++)
		{
			DispBuf[j/8][i] |= (
				(
				((j-64+1)%6==0)
				?
				0
				:
			((ACSII57[WeatherTemp[0][(j-64)/6]-32][(j-64)%6]>>(i-8-16))&1)
				)
				<<(j%8)
				);

		}
	}



	for (int j=0; j<8; j++)
	{
		for (int i=0+16; i<16+16; i++)
		{
			DispBuf[j][i] = 0;
		}
	}


	for (int j=0; j<30; j++)
	{
		for (int i=0+16; i<8+16; i++)
		{
			DispBuf[j/8][i] |= (
				(
				((j+1)%6==0)
				?
				0
				:
			((ACSII57[WeatherDay[1][(j)/6]-32][(j)%6]>>(i-16))&1)
				) 
				<<(j%8)
				);

		}

	}

	for (int j=0; j<30; j++)
	{
		for (int i=8+16; i<16+16; i++)
		{
			DispBuf[j/8][i] |= (
				(
				((j+1)%6==0)
				?
				0
				:
			((ACSII57[WeatherTemp[1][(j)/6]-32][(j)%6]>>(i-8-16))&1)
				)
				<<(j%8)
				);

		}
	}

	unsigned char ChartIndex[2];

	WeatherCode2ChartIndex(WeatherCode[0],ChartIndex);

	ShowChart(ChartIndex[0],4+8,16);
	ShowChart(ChartIndex[1],6+8,16);

	WeatherCode2ChartIndex(WeatherCode[1],ChartIndex);

	ShowChart(ChartIndex[0],4,16);
	ShowChart(ChartIndex[1],6,16);


}

void WeatherCode2ChartIndex(unsigned char Code,unsigned char * ChartIndex)
{
	unsigned char TempChat[2];
	switch(Code)
	{
	case 0://	ï¿½ï¿½
	case 1://ï¿½ï¿½
	case 2://ï¿½ï¿½
	case 3://ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = QING;

		break;

	case 4://ï¿½ï¿½ï¿½ï¿½
	case 5://ï¿½ï¿½ï¿½ï¿½	Partly Cloudy	ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	case 6://ï¿½ï¿½ï¿½ï¿½	Partly Cloudy	ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	case 7://ï¿½ï¿½ï¿½ï¿½	Mostly Cloudy	ï¿½ó²¿¶ï¿½ï¿½ï¿½
	case 8://ï¿½ï¿½ï¿½ï¿½	Mostly Cloudy	ï¿½ó²¿¶ï¿½ï¿½ï¿½
		ChartIndex[0] = DUO;
		ChartIndex[1] = YUN;
		break;

	case 9://ï¿½ï¿½	Overcast	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = YING;
		break;

	case 10://ï¿½ï¿½ï¿½ï¿½	Shower	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = ZHEN;
		ChartIndex[1] = YU;
		break;

	case 11://ï¿½ï¿½ï¿½ï¿½
	case 12://ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = LEI;
		ChartIndex[1] = YU;
		break;

	case 13://Ð¡ï¿½ï¿½	Light Rain	Ð¡ï¿½ï¿½
		ChartIndex[0] = XIAO;
		ChartIndex[1] = YU;
		break;

	case 14://ï¿½ï¿½ï¿½ï¿½	Moderate Rain	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = ZHONG;
		ChartIndex[1] = YU;
		break;

	case 15://ï¿½ï¿½ï¿½ï¿½	Heavy Rain	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = DA;
		ChartIndex[1] = YU;
		break;



	case 16://ï¿½ï¿½ï¿½ï¿½	Storm	ï¿½ï¿½ï¿½ï¿½
	case 17://ï¿½ï¿½ï¿½ï¿½	Heavy Storm	ï¿½ï¿½ï¿½ï¿½
	case 18://ï¿½ï¿½ï¿½ï¿½	Severe Storm	ï¿½Ø´ï¿½ï¿½ï¿½
		ChartIndex[0] = BAO;
		ChartIndex[1] = YU;
		break;

	case 19://ï¿½ï¿½ï¿½ï¿½	Ice Rain	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = DONG;
		ChartIndex[1] = YU;
		break;

	case 20://ï¿½ï¿½Ñ©	Sleet	ï¿½ï¿½ï¿½Ñ?		
		ChartIndex[0] = YU;
		ChartIndex[1] = XUE;
		break;

	case 21://ï¿½ï¿½Ñ©	Snow Flurry	ï¿½ï¿½Ñ©
		ChartIndex[0] = ZHEN;
		ChartIndex[1] = XUE;
		break;

	case 22://Ð¡Ñ©	Light Snow	Ð¡Ñ©
		ChartIndex[0] = XIAO;
		ChartIndex[1] = XUE;
		break;

	case 23://ï¿½ï¿½Ñ©	Moderate Snow	ï¿½ï¿½Ñ©
		ChartIndex[0] = ZHONG;
		ChartIndex[1] = XUE;
		break;

	case 24://ï¿½ï¿½Ñ©	Heavy Snow	ï¿½ï¿½Ñ©
		ChartIndex[0] = DA;
		ChartIndex[1] = XUE;
		break;

	case 25://	ï¿½ï¿½Ñ©	Snowstorm	ï¿½ï¿½Ñ©
		ChartIndex[0] = BAO;
		ChartIndex[1] = XUE;
		break;

	case 26://ï¿½ï¿½ï¿½ï¿½	Dust	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = FU;
		ChartIndex[1] = CHENG;
		break;

	case 27://ï¿½ï¿½É³	Sand	ï¿½ï¿½É³
		ChartIndex[0] = YANG;
		ChartIndex[1] = SHA;
		break;

	case 28://ï¿½ï¿½ï¿½ï¿½	Duststorm	É³ï¿½ï¿½ï¿½ï¿½
	case 29://ï¿½ï¿½ï¿½ï¿½	Sandstorm	Ç¿É³ï¿½ï¿½ï¿½ï¿½

		ChartIndex[0] = CHENG;
		ChartIndex[1] = BAO;
		break;

	case 30://ï¿½ï¿½	Foggy	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = WU;
		break;

	case 31://ï¿½ï¿½	Haze	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = MAI;
		break;


	case 32://ï¿½ï¿½	Windy	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = FENG;
		break;


	case 33://ï¿½ï¿½ï¿?Blustery	ï¿½ï¿½ï¿?		
		ChartIndex[0] = DA;
		ChartIndex[1] = FENG;
		break;


	case 34://	ì«·ï¿½	Hurricane	ì«·ï¿½
		ChartIndex[0] = JU;
		ChartIndex[1] = FENG;
		break;


	case 35://		ï¿½ç±©	Tropical Storm	ï¿½È´ï¿½ï¿½ç±©
		ChartIndex[0] = FENG;
		ChartIndex[1] = BAO;
		break;
		;

	case 36://	ï¿½ï¿½ï¿½ï¿½	Tornado	ï¿½ï¿½ï¿½ï¿½ï¿?		
		ChartIndex[0] = LONG;
		ChartIndex[1] = JUAN;
		break;



	case 37://	ï¿½ï¿½	Cold	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = LENG;
		break;


	case 38://	ï¿½ï¿½	Hot	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = RE;
		break;

	case 98://	fail
		ChartIndex[1] = KONG;
		ChartIndex[0] = KONG;
		break;



	case 99://	Î´Öª	Unknown
	default:

		ChartIndex[0] = WEI;
		ChartIndex[1] = ZHI;
		break;



	}
}


void WeatherCode2ChartIndex2(unsigned char Code,unsigned char * ChartIndex)
{
	unsigned char TempChat[2];
	switch(Code)
	{
	case 0://	ï¿½ï¿½

		ChartIndex[1] = KONG;
		ChartIndex[0] = QING;

		break;

	case 1://ï¿½ï¿½ï¿½ï¿½

		ChartIndex[0] = DUO;
		ChartIndex[1] = YUN;
		break;

	case 2://ï¿½ï¿½	Overcast	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = YING;
		break;

	case 3://ï¿½ï¿½ï¿½ï¿½	Shower	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = ZHEN;
		ChartIndex[1] = YU;
		break;

	case 4://ï¿½ï¿½ï¿½ï¿½
	case 5://ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = LEI;
		ChartIndex[1] = YU;
		break;

	case 6://ï¿½ï¿½Ñ©	Sleet	ï¿½ï¿½ï¿½Ñ?		ChartIndex[0] = YU;
		ChartIndex[1] = XUE;
		break;

	case 7://Ð¡ï¿½ï¿½	Light Rain	Ð¡ï¿½ï¿½
	case 21:
		ChartIndex[0] = XIAO;
		ChartIndex[1] = YU;
		break;

	case 8://ï¿½ï¿½ï¿½ï¿½	Moderate Rain	ï¿½ï¿½ï¿½ï¿½
	case 22:
		ChartIndex[0] = ZHONG;
		ChartIndex[1] = YU;
		break;

	case 9://ï¿½ï¿½ï¿½ï¿½	Heavy Rain	ï¿½ï¿½ï¿½ï¿½
	case 23:
		ChartIndex[0] = DA;
		ChartIndex[1] = YU;
		break;


	case 10://ï¿½ï¿½ï¿½ï¿½	Storm	ï¿½ï¿½ï¿½ï¿½
	case 11://ï¿½ï¿½ï¿½ï¿½	Heavy Storm	ï¿½ï¿½ï¿½ï¿½
	case 12://ï¿½ï¿½ï¿½ï¿½	Severe Storm	ï¿½Ø´ï¿½ï¿½ï¿½
	case 24:
	case 25:
		ChartIndex[0] = BAO;
		ChartIndex[1] = YU;
		break;

	case 13://ï¿½ï¿½Ñ©	Snow Flurry	ï¿½ï¿½Ñ©
		ChartIndex[0] = ZHEN;
		ChartIndex[1] = XUE;
		break;

	case 14://Ð¡Ñ©	Light Snow	Ð¡Ñ©
	case 26:
		ChartIndex[0] = XIAO;
		ChartIndex[1] = XUE;
		break;

	case 15://ï¿½ï¿½Ñ©	Moderate Snow	ï¿½ï¿½Ñ©
	case 27:
		ChartIndex[0] = ZHONG;
		ChartIndex[1] = XUE;
		break;

	case 16://ï¿½ï¿½Ñ©	Heavy Snow	ï¿½ï¿½Ñ©
	case 28:
		ChartIndex[0] = DA;
		ChartIndex[1] = XUE;
		break;

	case 17://	ï¿½ï¿½Ñ©	Snowstorm	ï¿½ï¿½Ñ©
		ChartIndex[0] = BAO;
		ChartIndex[1] = XUE;
		break;

	case 18://ï¿½ï¿½	Foggy	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = WU;
		break;


	case 19://ï¿½ï¿½ï¿½ï¿½	Ice Rain	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = DONG;
		ChartIndex[1] = YU;
		break;

	case 20://ï¿½ï¿½ï¿½ï¿½	Duststorm	É³ï¿½ï¿½ï¿½ï¿½
	case 31:

		ChartIndex[0] = CHENG;
		ChartIndex[1] = BAO;
		break;

	case 29://ï¿½ï¿½ï¿½ï¿½	Dust	ï¿½ï¿½ï¿½ï¿½
		ChartIndex[0] = FU;
		ChartIndex[1] = CHENG;
		break;

	case 30://ï¿½ï¿½É³	Sand	ï¿½ï¿½É³
		ChartIndex[0] = YANG;
		ChartIndex[1] = SHA;
		break;

	case 32://ï¿½ï¿½	Haze	ï¿½ï¿½
		ChartIndex[1] = KONG;
		ChartIndex[0] = MAI;
		break;

	default:

		ChartIndex[0] = WEI;
		ChartIndex[1] = ZHI;
		break;



	}
}

void ShowChart(unsigned char ChartIndex,unsigned char PostionX,unsigned char PostionY)
{
	for(unsigned char y=0; y<16; y++)
	{
		for (unsigned char i=0; i<8; i++)
		{
			DispBuf[PostionX][y+PostionY] = DispBuf[PostionX][y+PostionY]<<1;
			DispBuf[PostionX][y+PostionY]|=(Chart[32*ChartIndex+y*2]>>i)&1;

			DispBuf[PostionX+1][y+PostionY] = DispBuf[PostionX+1][y+PostionY]<<1;
			DispBuf[PostionX+1][y+PostionY]|=(Chart[32*ChartIndex+y*2+1]>>i)&1;
		}
	}
}


void hc595senddata(byte data,byte data2,byte data3,byte data4)//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½Ý¡ï¿½
{
	byte temp = 0;

	for (byte i=0; i<8;i++) {  
		digitalWrite(CLK,0);  

		temp = 0;
		temp = 
			data&1 //ï¿½ï¿½ï¿½ï¿½
			|
			((data2&1)<<1)
			|
			((data3&1)<<2)
			|
			((data4&1)<<3)
			;

		PORTA = temp;

		data=data>>1;
		data2=data2>>1;
		data3=data3>>1;
		data4=data4>>1;
		digitalWrite(CLK,1); 
	}  
	//DataUpdate();
}

void Hdot()
{
	unsigned char pix = 0;
	for (int k=0; k<96; k++)
	{
		for (int i=0; i<16; i++)//ï¿½Ý´ï¿½
		{
			ASCII816Buf[i]=ASCII816[k][i];
		}

		for(int j=0; j<8; j++)//×ªï¿½ï¿½ï¿½Ï°ë²¿ï¿½ï¿½8*8
		{
			pix = 0;
			for(int i=0; i<8; i++)
			{
				pix = pix<<1;
				pix=pix+((ASCII816Buf[7-i]>>j)&1);
			}
			ASCII816[k][j] = pix;
		}

		for(int j=8; j<16; j++)//×ªï¿½ï¿½ï¿½Â°ë²¿ï¿½ï¿½8*8
		{
			pix = 0;
			for(int i=8; i<16; i++)
			{
				pix = pix<<1;
				pix=pix+((ASCII816Buf[16+7-i]>>(j-8))&1);
			}
			ASCII816[k][j] = pix;
		}
	}
}



void hc138sacn(byte r)   //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬ABCD ï¿½ï¿½Aï¿½ï¿½,Dï¿½ï¿½)
{
	digitalWrite(RowA,(r & 0x01));
	digitalWrite(RowB,(r & 0x02));
	digitalWrite(RowC,(r & 0x04));
	digitalWrite(RowD,(r & 0x08));
}

void OnSecond()
{
	t = SecondsSinceStart+Start1970OffSet+3600*8;
	//printf("Date Time = %04d-%02d-%02d %02d:%02d:%02d \r\n",year(t) ,month(t),day(t),hour(t),minute(t),second(t));

	unsigned char Hour = hour(t);
	unsigned char Minute = minute(t);
	unsigned char Second = second(t);

	TimeLine[0]=Hour/10%10+0x30;
	TimeLine[1]=Hour%10+0x30;
	TimeLine[3]=Minute/10%10+0x30;
	TimeLine[4]=Minute%10+0x30;
	TimeLine[6]=Second/10%10+0x30;
	TimeLine[7]=Second%10+0x30;

	if(SecondsSinceStart%(3000)==2800)//
	{
		initESP8266();
	}

	if(SecondsSinceStart%(3000)==0)//update time every 1000s
	{
		Serial.println(F("before Getweather!\r\n"));

		if(!SendRequestAndProcessReply())
		{
			DateLine2[0] = '-';
			DateLine2[1] = '-';
			Serial.println(F("GetWeather failed!\r\n"));
			return;
		}
		else
		{
			DateLine2[0] = WeatherData.TemperatureNow[0];
			DateLine2[1] = WeatherData.TemperatureNow[1];
		}
		BufUpdate();
	}
	if((Hour == 0)&&(Minute == 0)&&(Second == 1))
	{
		BufUpdate();
	}

	//update dispaly buf
	for (int j=0; j<8; j++)
	{
		for (int i=0; i<16; i++)
		{
			DispBuf[j][i] = ASCII816[TimeLine[j]-32][i];

		}
	}


}
bool _esp8266_waitFor(const char *string) {
	char so_far = 0;
	char received;
	int counter = 0;
	do {
		//received = _esp8266_getch();
		if (!_esp8266_getch(&received))
		{
			return false;
		}
		counter++;
		if (received == string[so_far]) {
			so_far++;
		} else {
			so_far = 0;
		}
	} while (string[so_far] != 0);
	return true;
}

bool _esp8266_getValue(const char *string,unsigned char  * Value,unsigned char * Len,unsigned char Start,unsigned char Max) 
{
	char received;
	*Len = 0;
	unsigned char CurrentChar = 0;

	if(!_esp8266_waitFor(string)) return false;

	unsigned long RecvStartTime = SecondsSinceStart;
	while(1) 
	{
		if (!_esp8266_getch(&received))
		{
			return false;
		}

		if ((received == '"')||((*Len)>=Max))
		{
			return true;
		} 
		else
		{
			if (CurrentChar >= Start)
			{
				*(Value+(*Len)) = received;
				(*Len) = (*Len)+1;
			} 
			else
			{
				CurrentChar++;
			}

		}

		if (SecondsSinceStart - RecvStartTime > TimeOut)
		{
			return false;
		}
	} 

}




//**Function to get one byte of date from UART**//
bool _esp8266_getch(char * RetData)   
{

	static bool WaitFinsih = false;
	static unsigned char CompareIndex = 0;
	static bool NewLine = false;

	unsigned long RecvStartTime = SecondsSinceStart;
	while (1)
	{
		if (WIFI_SERIAL.available() > 0)
		{
			*RetData = WIFI_SERIAL.read();

			Serial.write(*RetData);
			return true;
		}
		else
		{
			NonStopTask();
		}

		if (SecondsSinceStart - RecvStartTime > TimeOut)
		{
			return false;
		}
	}
}


